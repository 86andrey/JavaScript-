// # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç–∏–µ 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. forEach

// ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

// –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

// - `createProduct(obj, callback)` - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ id, –∞ —Ç–∞–∫–∂–µ
//   –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—å–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤
//   —Å–≤–æ–π—Å—Ç–≤–æ `id` –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—å–µ–∫—Ç.
// - `logProduct(product)` - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –µ–≥–æ –≤
//   –∫–æ–Ω—Å–æ–ª—å
// - `logTotalPrice(product)` - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π
//   –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

// ```js
// // –†–µ—à–µ–Ω–∏–µ
// function createProduct(partialProduct, callback) {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(product);
// }

// function logTotalPrice(product) {
//   console.log(product.price * product.quantity);
// }

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
// ```

// ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç—É `account` –º–µ—Ç–æ–¥—ã `withdraw(amount, onSuccess, onError)` –∏
// `deposit(amount, onSuccess, onError)`, –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞
// –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π - –∫–æ–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ `withdraw` –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏
// this.balance, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// –ú–µ—Ç–æ–¥ `deposit` –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏ –º–µ–Ω—å—à–µ
// –ª–∏–±–æ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// ```js
// // –†–µ—à–µ–Ω–∏–µ
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount > this.balance) {
//       onError(`Amount can't exceed account balance of ${this.balance} credits`);
//     } else {
//       this.balance -= amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount <= 0) {
//       onError(`Amount must be more than 0 credits`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// ```

// ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `each(array, callback)`, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç
// –º–∞—Å—Å–∏–≤, –∞ –≤—Ç–æ—Ä—ã–º - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞.
// –§—É–Ω–∫—Ü–∏—è each –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
// –≤—ã–∑–æ–≤–∞ –∫–æ–ª–ª–±–µ–∫–∞.

// ```js
// // –†–µ—à–µ–Ω–∏–µ
// function each(array, callback) {
//   const newArr = [];
//   for (const element of array) {
//     newArr.push(callback(element));
//   }
//   return newArr;
// }

// console.log(
//   each([64, 49, 36, 25, 16], value => value * 2));

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], value => Math.sqrt(value)));

// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );
// ```

// ## Example 4 - –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// ```js
// function createProduct(partialProduct, callback) {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(product);
// }

// function logTotalPrice(product) {
//   console.log(product.price * product.quantity);
// }

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
// ```

// ## Example 5 - –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// ```js
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount > this.balance) {
//       onError(`Amount can't exceed account balance of ${this.balance} credits`);
//     } else {
//       this.balance -= amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount <= 0) {
//       onError(`Amount must be more than 0 credits`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// ```

// ## Example 6 - –ò–Ω–ª–∞–π–Ω —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// ```js
// function each(array, callback) {
//   const newArr = [];
//   for (const el of array) {
//     newArr.push(callback(el));
//   }
//   return newArr;
// }

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );
// ```

// ## Example 7 - –ú–µ—Ç–æ–¥ forEach

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ `forEach` –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// ```js
// function logItems(items) {
//   console.log(items);
//   for (let i = 0; i < items.length; i += 1) {
//     console.log(`${i + 1} - ${items[i]}`);
//   }
// }
// –ú–µ—Ç–æ–¥ forEach
// function logItems(items) {
//   items.forEach((item, index) => console.log(`${index + 1} - ${item}`))
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
// ```

// ## Example 8 - –ú–µ—Ç–æ–¥ forEach

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ `forEach` –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// ```js
// function printContactsInfo({ names, phones }) {
//   const nameList = names.split(',');
//   const phoneList = phones.split(',');
//   for (let i = 0; i < nameList.length; i += 1) {
//     console.log(`${nameList[i]}: ${phoneList[i]}`);
//   }
// }
// function printContactsInfo({ names, phones }) {
//   const nameList = names.split(',');
//   const phoneList = phones.split(',');
//   nameList.forEach((item, index) => console.log(`${item}:${phoneList[index]}`))
// }
// printContactsInfo({
//   names: 'Jacob,William,Solomon,Artemis',
//   phones: '89001234567,89001112233,890055566377,890055566300',
// });
// ```

// ## Example 9 - –ú–µ—Ç–æ–¥ forEach

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ `forEach` –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// // ```js
// function cal—ÅulateAverage(...args) {
//   let total = 0;
//   for (let i = 0; i < args.length; i++) {
//     total += args[i];
//   }
//   return total / args.length;
// }
// function cal—ÅulateAverage(...args) {
//   let total = 0;
//   args.forEach(arg => total += arg);
//   return total / args.length;
// }


// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
// ```



// function greet(name) {
//     console.log(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${name}!`);
// }
// function register(name, callback) {
//     console.log(`—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Å—Ç—è ${name}`);
//     callback(name);
// }
// register("–ê–Ω–¥—Ä–µ–π", greet);

// ____________________________________________________

// –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π

// 1. –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
// const buttonRef = document.querySelector('.js-button');

// const handleBtnClick = function() {
//   console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ' + Date.now());
// }
// 2. –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è (—É–∫–∞–∂–∏ —Å–æ–±—ã—Ç–∏–µ –∏ —É–∫–∞–∂–∏ —Ñ-—Ü–∏—é)
// –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ —Ç–æ –∫–æ–¥–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é
// buttonRef.addEventListener('click', handleBtnClick);

// ____________________________________________________

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// const myLibfac = function() {

//   let secretPassword = 100;

//   const add = (num) => secretPassword += num;
//   const getValue = () => secretPassword;

//   return {
//     add,
//     getValue,
//   };
// };


// const myLib = myLibfac();

// console.log(myLib.add(15));



// ____________________________________________________
// –ò–Ω–ª–∞–π–Ω –∫–æ–ª–±—ç–∫ !!!
// function registerGuest(name, callback) {
//     console.log(`–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Å—Ç—è ${name}.`);
//     callback(name);
//   }
//   name = "Andrey";
//   registerGuest("–ú–∞–Ω–≥–æ", function greet(name) {
//     console.log(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${name}.`);
//   });
//   registerGuest("–ü–æ–ª–∏", function notify(name) {
//     console.log(`–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${name}, –≤–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.`);
//   });
// _____________________________________________________________
// !!! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã !!!
// –ï—Å–ª–∏ –≤ —Å–≤–æ–π—Å—Ç–≤–µ pizzas –Ω–µ—Ç –ø–∏—Ü—Ü—ã pizzaName, –º–µ—Ç–æ–¥ order –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∫–æ–ª–±—ç–∫–∞ onError, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Å—Ç—Ä–æ–∫—É "There is no pizza with a name <–∏–º—è –ø–∏—Ü—Ü—ã> in the assortment."
// –ï—Å–ª–∏ –≤ —Å–≤–æ–π—Å—Ç–≤–µ pizzas –µ—Å—Ç—å –ø–∏—Ü—Ü–∞ pizzaName, –º–µ—Ç–æ–¥ order –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∫–æ–ª–±—ç–∫–∞ onSuccess, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∏–º—è –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∏—Ü—Ü—ã.

// const pizzaPalace = {
//     pizzas: ['Ultracheese', 'Smoked', 'Four meats'],
//     order(pizzaName, onSuccess, onError) {
//       for (const item of this.pizzas) {
          
//       if (item === pizzaName) {
//       return onSuccess(pizzaName);
//     }
//     } return onError(pizzaName)
//   }
// }
  
//   function makePizza(pizzaName) {
//     return `Your order is accepted. Cooking pizza ${pizzaName}.`;
//   }
  
//   function onOrderError(pizzaName) {
//     return `Error! There is no pizza with a name ${pizzaName} in the assortment.`;
//   }
  
//   // Method calls with callbacks
//   console.log(pizzaPalace.order('Smoked', makePizza, onOrderError));
//   console.log(pizzaPalace.order('Four meats', makePizza, onOrderError));
//   console.log(pizzaPalace.order('Big Mike', makePizza, onOrderError));
//   console.log(pizzaPalace.order('Vienna', makePizza, onOrderError));

// const changeEven = (numbers, value) => {
//     const newArray = [];
//    numbers.forEach(element => {
//         if (element % 2 === 0) {
//         newArray.push(element + value);
//       }
//     });
//     return newArray;
//   }
//   console.log(changeEven([1, 2, 3, 4, 5], 10));
//   console.log(changeEven([17, 24, 68, 31, 42], 100));
  
// const players = [
//   { name: "Mango", playtime: 1270, gamesPlayed: 4 },
//   { name: "Poly", playtime: 469, gamesPlayed: 2 },
//   { name: "Ajax", playtime: 690, gamesPlayed: 3 },
//   { name: "Kiwi", playtime: 241, gamesPlayed: 1 },
// ];
// // Change code below this line
// const average = players.map(player => player.playtime / player.gamesPlayed);
// const averagePlay = average.reduce((previousValue, player) => {
//   return previousValue + player;
// },0);
// console.log(averagePlay);


// const totalAveragePlaytimePerGame = averagePlay.reduce((previousValue, number) => {
//   return previousValue + number;
// });

// const getTotalBalanceByGender = (users, gender) => {
//   const total = [...users]
//   .filter(course => course.gender === gender)
//   .map(student => student.balance)
//   .reduce((previousValue, number) => {
//         return previousValue + number;
// });
// return total;
// };
// // Change code above this line
// console.log(getTotalBalanceByGender([
//  {
//    name: "Moore Hensley",
//    email: "moorehensley@indexia.com",
//    eyeColor: "blue",
//    friends: ["Sharron Pace"],
//    isActive: false,
//    balance: 2811,
//    gender: "male"
//  },
//  {
//    name: "Sharlene Bush",
//    email: "sharlenebush@tubesys.com",
//    eyeColor: "blue",
//    friends: ["Briana Decker", "Sharron Pace"],
//    isActive: true,
//    balance: 3821,
//    gender: "female"
//  },
//  {
//    name: "Ross Vazquez",
//    email: "rossvazquez@xinware.com",
//    eyeColor: "green",
//    friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//    isActive: false,
//    balance: 3793,
//    gender: "male"
//  },
//  {
//    name: "Elma Head",
//    email: "elmahead@omatom.com",
//    eyeColor: "green",
//    friends: ["Goldie Gentry", "Aisha Tran"],
//    isActive: true,
//    balance: 2278,
//    gender: "female"
//  },
//  {
//    name: "Carey Barr",
//    email: "careybarr@nurali.com",
//    eyeColor: "blue",
//    friends: ["Jordan Sampson", "Eddie Strong", "Adrian Cross"],
//    isActive: true,
//    balance: 3951,
//    gender: "male"
//  },
//  {
//    name: "Blackburn Dotson",
//    email: "blackburndotson@furnigeer.com",
//    eyeColor: "brown",
//    friends: ["Jacklyn Lucas", "Linda Chapman", "Adrian Cross", "Solomon Fokes"],
//    isActive: false,
//    balance: 1498,
//    gender: "male"
//  },
//  {
//    name: "Sheree Anthony",
//    email: "shereeanthony@kog.com",
//    eyeColor: "brown",
//    friends: ["Goldie Gentry", "Briana Decker"],
//    isActive: true,
//    balance: 2764,
//    gender: "female"
//  }
// ], "female"))

// ________________________________________
// const filter = function (array, test) {
//   const filteredArray = [];
//   for (const el of array) {
//     const passed = test(el);
//       if (passed) {
//         filteredArray.push(el);
//       }
//   } return filteredArray;
// };

// const fruits = [
//   {name: 'ap', quantity: 200, isFresh: true},
//   {name: 'rt', quantity: 150, isFresh: false},
//   {name: 'et', quantity: 100, isFresh: true},
// ];

// console.log(filter(fruits, fruit => fruit.quantity > 120));

